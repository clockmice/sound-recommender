// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// Bpm Bpm.
type Bpm = int

// CreatedAt The time the entity was created (UTC) ISO8601.
type CreatedAt = time.Time

// Credit defines model for credit.
type Credit struct {
	// Name Name of the entity.
	Name *Name `json:"name,omitempty"`

	// Role Role of the entity.
	Role *Role `json:"role,omitempty"`
}

// DurationInSeconds Duration in seconds.
type DurationInSeconds = int

// Genre Genre of the entity.
type Genre = string

// Id The id of the entity.
type Id = string

// Name Name of the entity.
type Name = string

// Playlist defines model for playlist.
type Playlist struct {
	// CreatedAt The time the entity was created (UTC) ISO8601.
	CreatedAt *CreatedAt `json:"createdAt,omitempty"`

	// Id The id of the entity.
	Id     *Id      `json:"id,omitempty"`
	Sounds *[]Sound `json:"sounds,omitempty"`

	// Title Title of the entity.
	Title *Title `json:"title,omitempty"`

	// UpdatedAt The time the entity was updated (UTC) ISO8601.
	UpdatedAt *UpdatedAt `json:"updatedAt,omitempty"`
}

// Role Role of the entity.
type Role = string

// Sound defines model for sound.
type Sound struct {
	// Bpm Bpm.
	Bpm Bpm `json:"bpm"`

	// CreatedAt The time the entity was created (UTC) ISO8601.
	CreatedAt CreatedAt `json:"createdAt"`
	Credits   []Credit  `json:"credits"`

	// DurationInSeconds Duration in seconds.
	DurationInSeconds DurationInSeconds `json:"duration_in_seconds"`
	Genres            []Genre           `json:"genres"`

	// Id The id of the entity.
	Id Id `json:"id"`

	// Title Title of the entity.
	Title Title `json:"title"`

	// UpdatedAt The time the entity was updated (UTC) ISO8601.
	UpdatedAt UpdatedAt `json:"updatedAt"`
}

// Title Title of the entity.
type Title = string

// UpdatedAt The time the entity was updated (UTC) ISO8601.
type UpdatedAt = time.Time

// N400 defines model for 400.
type N400 struct {
	Detail string `json:"detail"`
}

// N404 defines model for 404.
type N404 struct {
	Detail string `json:"detail"`
}

// N500 defines model for 500.
type N500 struct {
	Detail string `json:"detail"`
}

// PostAdminSoundsJSONBody defines parameters for PostAdminSounds.
type PostAdminSoundsJSONBody struct {
	Data []struct {
		// Bpm Bpm.
		Bpm     *Bpm      `json:"bpm,omitempty"`
		Credits *[]Credit `json:"credits,omitempty"`

		// DurationInSeconds Duration in seconds.
		DurationInSeconds *DurationInSeconds `json:"duration_in_seconds,omitempty"`
		Genres            *[]Genre           `json:"genres,omitempty"`

		// Title Title of the entity.
		Title *Title `json:"title,omitempty"`
	} `json:"data"`
}

// PostPlaylistsJSONBody defines parameters for PostPlaylists.
type PostPlaylistsJSONBody struct {
	Data []struct {
		Sounds *[]string `json:"sounds,omitempty"`
		Title  *string   `json:"title,omitempty"`
	} `json:"data"`
}

// GetSoundsRecommendedParams defines parameters for GetSoundsRecommended.
type GetSoundsRecommendedParams struct {
	// PlaylistId ID of the playlist to get recommendations for
	PlaylistId string `form:"playlistId" json:"playlistId"`
}

// PostAdminSoundsJSONRequestBody defines body for PostAdminSounds for application/json ContentType.
type PostAdminSoundsJSONRequestBody PostAdminSoundsJSONBody

// PostPlaylistsJSONRequestBody defines body for PostPlaylists for application/json ContentType.
type PostPlaylistsJSONRequestBody PostPlaylistsJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostAdminSoundsWithBody request with any body
	PostAdminSoundsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAdminSounds(ctx context.Context, body PostAdminSoundsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlaylists request
	GetPlaylists(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPlaylistsWithBody request with any body
	PostPlaylistsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPlaylists(ctx context.Context, body PostPlaylistsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSounds request
	GetSounds(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSoundsRecommended request
	GetSoundsRecommended(ctx context.Context, params *GetSoundsRecommendedParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostAdminSoundsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminSoundsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminSounds(ctx context.Context, body PostAdminSoundsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminSoundsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlaylists(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlaylistsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPlaylistsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPlaylistsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPlaylists(ctx context.Context, body PostPlaylistsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPlaylistsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSounds(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSoundsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSoundsRecommended(ctx context.Context, params *GetSoundsRecommendedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSoundsRecommendedRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostAdminSoundsRequest calls the generic PostAdminSounds builder with application/json body
func NewPostAdminSoundsRequest(server string, body PostAdminSoundsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAdminSoundsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAdminSoundsRequestWithBody generates requests for PostAdminSounds with any type of body
func NewPostAdminSoundsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/sounds")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPlaylistsRequest generates requests for GetPlaylists
func NewGetPlaylistsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/playlists")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPlaylistsRequest calls the generic PostPlaylists builder with application/json body
func NewPostPlaylistsRequest(server string, body PostPlaylistsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPlaylistsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostPlaylistsRequestWithBody generates requests for PostPlaylists with any type of body
func NewPostPlaylistsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/playlists")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSoundsRequest generates requests for GetSounds
func NewGetSoundsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sounds")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSoundsRecommendedRequest generates requests for GetSoundsRecommended
func NewGetSoundsRecommendedRequest(server string, params *GetSoundsRecommendedParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sounds/recommended")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "playlistId", runtime.ParamLocationQuery, params.PlaylistId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostAdminSoundsWithBodyWithResponse request with any body
	PostAdminSoundsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminSoundsResponse, error)

	PostAdminSoundsWithResponse(ctx context.Context, body PostAdminSoundsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminSoundsResponse, error)

	// GetPlaylistsWithResponse request
	GetPlaylistsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPlaylistsResponse, error)

	// PostPlaylistsWithBodyWithResponse request with any body
	PostPlaylistsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPlaylistsResponse, error)

	PostPlaylistsWithResponse(ctx context.Context, body PostPlaylistsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPlaylistsResponse, error)

	// GetSoundsWithResponse request
	GetSoundsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSoundsResponse, error)

	// GetSoundsRecommendedWithResponse request
	GetSoundsRecommendedWithResponse(ctx context.Context, params *GetSoundsRecommendedParams, reqEditors ...RequestEditorFn) (*GetSoundsRecommendedResponse, error)
}

type PostAdminSoundsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data *[]Sound `json:"data,omitempty"`
	}
	JSON400 *N400
	JSON500 *N500
}

// Status returns HTTPResponse.Status
func (r PostAdminSoundsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminSoundsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlaylistsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *[]Playlist `json:"data,omitempty"`
	}
	JSON404 *N404
	JSON500 *N500
}

// Status returns HTTPResponse.Status
func (r GetPlaylistsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlaylistsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPlaylistsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data *[]Playlist `json:"data,omitempty"`
	}
	JSON400 *N400
	JSON500 *N500
}

// Status returns HTTPResponse.Status
func (r PostPlaylistsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPlaylistsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSoundsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *[]Sound `json:"data,omitempty"`
	}
	JSON404 *N404
	JSON500 *N500
}

// Status returns HTTPResponse.Status
func (r GetSoundsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSoundsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSoundsRecommendedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *[]Sound `json:"data,omitempty"`
	}
	JSON500 *N500
}

// Status returns HTTPResponse.Status
func (r GetSoundsRecommendedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSoundsRecommendedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostAdminSoundsWithBodyWithResponse request with arbitrary body returning *PostAdminSoundsResponse
func (c *ClientWithResponses) PostAdminSoundsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminSoundsResponse, error) {
	rsp, err := c.PostAdminSoundsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminSoundsResponse(rsp)
}

func (c *ClientWithResponses) PostAdminSoundsWithResponse(ctx context.Context, body PostAdminSoundsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminSoundsResponse, error) {
	rsp, err := c.PostAdminSounds(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminSoundsResponse(rsp)
}

// GetPlaylistsWithResponse request returning *GetPlaylistsResponse
func (c *ClientWithResponses) GetPlaylistsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPlaylistsResponse, error) {
	rsp, err := c.GetPlaylists(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlaylistsResponse(rsp)
}

// PostPlaylistsWithBodyWithResponse request with arbitrary body returning *PostPlaylistsResponse
func (c *ClientWithResponses) PostPlaylistsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPlaylistsResponse, error) {
	rsp, err := c.PostPlaylistsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPlaylistsResponse(rsp)
}

func (c *ClientWithResponses) PostPlaylistsWithResponse(ctx context.Context, body PostPlaylistsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPlaylistsResponse, error) {
	rsp, err := c.PostPlaylists(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPlaylistsResponse(rsp)
}

// GetSoundsWithResponse request returning *GetSoundsResponse
func (c *ClientWithResponses) GetSoundsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSoundsResponse, error) {
	rsp, err := c.GetSounds(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSoundsResponse(rsp)
}

// GetSoundsRecommendedWithResponse request returning *GetSoundsRecommendedResponse
func (c *ClientWithResponses) GetSoundsRecommendedWithResponse(ctx context.Context, params *GetSoundsRecommendedParams, reqEditors ...RequestEditorFn) (*GetSoundsRecommendedResponse, error) {
	rsp, err := c.GetSoundsRecommended(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSoundsRecommendedResponse(rsp)
}

// ParsePostAdminSoundsResponse parses an HTTP response from a PostAdminSoundsWithResponse call
func ParsePostAdminSoundsResponse(rsp *http.Response) (*PostAdminSoundsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminSoundsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data *[]Sound `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetPlaylistsResponse parses an HTTP response from a GetPlaylistsWithResponse call
func ParseGetPlaylistsResponse(rsp *http.Response) (*GetPlaylistsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlaylistsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *[]Playlist `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostPlaylistsResponse parses an HTTP response from a PostPlaylistsWithResponse call
func ParsePostPlaylistsResponse(rsp *http.Response) (*PostPlaylistsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPlaylistsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data *[]Playlist `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetSoundsResponse parses an HTTP response from a GetSoundsWithResponse call
func ParseGetSoundsResponse(rsp *http.Response) (*GetSoundsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSoundsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *[]Sound `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetSoundsRecommendedResponse parses an HTTP response from a GetSoundsRecommendedWithResponse call
func ParseGetSoundsRecommendedResponse(rsp *http.Response) (*GetSoundsRecommendedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSoundsRecommendedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *[]Sound `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create sounds
	// (POST /admin/sounds)
	PostAdminSounds(w http.ResponseWriter, r *http.Request)
	// Get playlists
	// (GET /playlists)
	GetPlaylists(w http.ResponseWriter, r *http.Request)
	// Create playlist
	// (POST /playlists)
	PostPlaylists(w http.ResponseWriter, r *http.Request)
	// Get sounds
	// (GET /sounds)
	GetSounds(w http.ResponseWriter, r *http.Request)
	// Get recommended sounds based on a playlist ID
	// (GET /sounds/recommended)
	GetSoundsRecommended(w http.ResponseWriter, r *http.Request, params GetSoundsRecommendedParams)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Create sounds
// (POST /admin/sounds)
func (_ Unimplemented) PostAdminSounds(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get playlists
// (GET /playlists)
func (_ Unimplemented) GetPlaylists(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create playlist
// (POST /playlists)
func (_ Unimplemented) PostPlaylists(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get sounds
// (GET /sounds)
func (_ Unimplemented) GetSounds(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get recommended sounds based on a playlist ID
// (GET /sounds/recommended)
func (_ Unimplemented) GetSoundsRecommended(w http.ResponseWriter, r *http.Request, params GetSoundsRecommendedParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// PostAdminSounds operation middleware
func (siw *ServerInterfaceWrapper) PostAdminSounds(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAdminSounds(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetPlaylists operation middleware
func (siw *ServerInterfaceWrapper) GetPlaylists(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPlaylists(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostPlaylists operation middleware
func (siw *ServerInterfaceWrapper) PostPlaylists(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostPlaylists(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetSounds operation middleware
func (siw *ServerInterfaceWrapper) GetSounds(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSounds(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetSoundsRecommended operation middleware
func (siw *ServerInterfaceWrapper) GetSoundsRecommended(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSoundsRecommendedParams

	// ------------- Required query parameter "playlistId" -------------

	if paramValue := r.URL.Query().Get("playlistId"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "playlistId"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "playlistId", r.URL.Query(), &params.PlaylistId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "playlistId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSoundsRecommended(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/admin/sounds", wrapper.PostAdminSounds)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/playlists", wrapper.GetPlaylists)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/playlists", wrapper.PostPlaylists)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/sounds", wrapper.GetSounds)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/sounds/recommended", wrapper.GetSoundsRecommended)
	})

	return r
}

type N400JSONResponse struct {
	Detail string `json:"detail"`
}

type N404JSONResponse struct {
	Detail string `json:"detail"`
}

type N500JSONResponse struct {
	Detail string `json:"detail"`
}

type PostAdminSoundsRequestObject struct {
	Body *PostAdminSoundsJSONRequestBody
}

type PostAdminSoundsResponseObject interface {
	VisitPostAdminSoundsResponse(w http.ResponseWriter) error
}

type PostAdminSounds201JSONResponse struct {
	Data *[]Sound `json:"data,omitempty"`
}

func (response PostAdminSounds201JSONResponse) VisitPostAdminSoundsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostAdminSounds400JSONResponse struct{ N400JSONResponse }

func (response PostAdminSounds400JSONResponse) VisitPostAdminSoundsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostAdminSounds500JSONResponse struct{ N500JSONResponse }

func (response PostAdminSounds500JSONResponse) VisitPostAdminSoundsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetPlaylistsRequestObject struct {
}

type GetPlaylistsResponseObject interface {
	VisitGetPlaylistsResponse(w http.ResponseWriter) error
}

type GetPlaylists200JSONResponse struct {
	Data *[]Playlist `json:"data,omitempty"`
}

func (response GetPlaylists200JSONResponse) VisitGetPlaylistsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPlaylists404JSONResponse struct{ N404JSONResponse }

func (response GetPlaylists404JSONResponse) VisitGetPlaylistsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetPlaylists500JSONResponse struct{ N500JSONResponse }

func (response GetPlaylists500JSONResponse) VisitGetPlaylistsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostPlaylistsRequestObject struct {
	Body *PostPlaylistsJSONRequestBody
}

type PostPlaylistsResponseObject interface {
	VisitPostPlaylistsResponse(w http.ResponseWriter) error
}

type PostPlaylists201JSONResponse struct {
	Data *[]Playlist `json:"data,omitempty"`
}

func (response PostPlaylists201JSONResponse) VisitPostPlaylistsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostPlaylists400JSONResponse struct{ N400JSONResponse }

func (response PostPlaylists400JSONResponse) VisitPostPlaylistsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostPlaylists500JSONResponse struct{ N500JSONResponse }

func (response PostPlaylists500JSONResponse) VisitPostPlaylistsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetSoundsRequestObject struct {
}

type GetSoundsResponseObject interface {
	VisitGetSoundsResponse(w http.ResponseWriter) error
}

type GetSounds200JSONResponse struct {
	Data *[]Sound `json:"data,omitempty"`
}

func (response GetSounds200JSONResponse) VisitGetSoundsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSounds404JSONResponse struct{ N404JSONResponse }

func (response GetSounds404JSONResponse) VisitGetSoundsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetSounds500JSONResponse struct{ N500JSONResponse }

func (response GetSounds500JSONResponse) VisitGetSoundsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetSoundsRecommendedRequestObject struct {
	Params GetSoundsRecommendedParams
}

type GetSoundsRecommendedResponseObject interface {
	VisitGetSoundsRecommendedResponse(w http.ResponseWriter) error
}

type GetSoundsRecommended200JSONResponse struct {
	Data *[]Sound `json:"data,omitempty"`
}

func (response GetSoundsRecommended200JSONResponse) VisitGetSoundsRecommendedResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSoundsRecommended500JSONResponse struct{ N500JSONResponse }

func (response GetSoundsRecommended500JSONResponse) VisitGetSoundsRecommendedResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Create sounds
	// (POST /admin/sounds)
	PostAdminSounds(ctx context.Context, request PostAdminSoundsRequestObject) (PostAdminSoundsResponseObject, error)
	// Get playlists
	// (GET /playlists)
	GetPlaylists(ctx context.Context, request GetPlaylistsRequestObject) (GetPlaylistsResponseObject, error)
	// Create playlist
	// (POST /playlists)
	PostPlaylists(ctx context.Context, request PostPlaylistsRequestObject) (PostPlaylistsResponseObject, error)
	// Get sounds
	// (GET /sounds)
	GetSounds(ctx context.Context, request GetSoundsRequestObject) (GetSoundsResponseObject, error)
	// Get recommended sounds based on a playlist ID
	// (GET /sounds/recommended)
	GetSoundsRecommended(ctx context.Context, request GetSoundsRecommendedRequestObject) (GetSoundsRecommendedResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// PostAdminSounds operation middleware
func (sh *strictHandler) PostAdminSounds(w http.ResponseWriter, r *http.Request) {
	var request PostAdminSoundsRequestObject

	var body PostAdminSoundsJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostAdminSounds(ctx, request.(PostAdminSoundsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAdminSounds")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostAdminSoundsResponseObject); ok {
		if err := validResponse.VisitPostAdminSoundsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetPlaylists operation middleware
func (sh *strictHandler) GetPlaylists(w http.ResponseWriter, r *http.Request) {
	var request GetPlaylistsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetPlaylists(ctx, request.(GetPlaylistsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPlaylists")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetPlaylistsResponseObject); ok {
		if err := validResponse.VisitGetPlaylistsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostPlaylists operation middleware
func (sh *strictHandler) PostPlaylists(w http.ResponseWriter, r *http.Request) {
	var request PostPlaylistsRequestObject

	var body PostPlaylistsJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostPlaylists(ctx, request.(PostPlaylistsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostPlaylists")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostPlaylistsResponseObject); ok {
		if err := validResponse.VisitPostPlaylistsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSounds operation middleware
func (sh *strictHandler) GetSounds(w http.ResponseWriter, r *http.Request) {
	var request GetSoundsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetSounds(ctx, request.(GetSoundsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSounds")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetSoundsResponseObject); ok {
		if err := validResponse.VisitGetSoundsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSoundsRecommended operation middleware
func (sh *strictHandler) GetSoundsRecommended(w http.ResponseWriter, r *http.Request, params GetSoundsRecommendedParams) {
	var request GetSoundsRecommendedRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetSoundsRecommended(ctx, request.(GetSoundsRecommendedRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSoundsRecommended")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetSoundsRecommendedResponseObject); ok {
		if err := validResponse.VisitGetSoundsRecommendedResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xY32/bNhD+V4jbHjZAs5QtGwK9pQ0QCCvaoOmeiqBgxLPNQiJZ8tzOCPS/DyStH7YV",
	"W4uHtOuTZeo7Hu+7+04nPUCpa6MVKnKQP4BFZ7RyGP6cZ5n/KbUiVOQvuTGVLDlJrdKPTiu/5sol1txf",
	"GasNWpLRWiBxWfkrWhuEHBxZqRbQNAlY/LSSFgXk71vcXdLi9P1HLAkaDxToSiuNdwg5vOCCeVN0NIMm",
	"gfPs/Ns64GtNbK5XSoTj/f6t8VcoQqt4xRzaz2gZWqvtLOwYTxEc35s6+t+i3tQz6FxIRbhA64MsLXJC",
	"cUn7Nu+WyEjWyGiJDBVJWrMv3LGNCfvpr3cvf2bF7ZuLP7Izv/tc25oT5CA44S/etHfZRh88Ckn7hCle",
	"o//90eIccvgh7Us73YSXBownUFdHsQHjudnhNQGxsiGHhbrFUivh9mO/2kCYVMxF0Dh/C1QW9+2v/TLT",
	"8wF3szEypBjnXYoJxi1jO0XM6ymeTcXXlXQjidgqiUMM98AukkNwKTzOeX0FP5KwdseMAhz6LHJr+Tr8",
	"l3S8BiKoSWBlxLSYeuBo6bSFt035W11NoTzGssf3RrCHTuUhu2KdnJkouOmUbwQ6wnkrnA9SfXC9dA5t",
	"tq+1VjTTDxQ1NnKeqTX3LLUybOpSQOs1CfntYh4nsU/SMMnDo9yNFGMX1k7/8MsTynErzmmtf2PytNbv",
	"SZJqrvfdXd4UjDSrueILZJwFobBK3ltu1x2TOdyG9VdxnV3eFJDAZ7Qu7nI2y2aZD0wbVNxIyOG3sJSA",
	"4bQMZZZyUUuV9k3I6NgCvSBjoQrI4UY7uvTI2wiM2UVHL7RYnzIUcOJbZX9CJ/hONf1vtDrWobf32x22",
	"PP/jo1YPI7vCsDCYpX/Nzv7LtD/hiddMGBBfxtYRZ+vsMUddYKkH9YPuYawHhUlzVddela03ttGSv5e2",
	"Q0UIcoEjyrpGuulAeyRnz0VyN/08iec3fw5eX45RfH4CxddIrOfUT22PtqttVp+hWY0Mcvg3r03o1A8P",
	"4XYhmmbs0fOo6PsdXuOXLvSRZ8n3qPzTivKriL8/spd/XxKPaX/wPP06wj+huz6r6oddNV6nFktd16gE",
	"iuMUvx2A/fxjeY2E1kH+fnf6Kq7aYbHNph/GFkis8xgcODbXFvwMBzl8WmEYzeI7aPc2WQjYFVQySNyu",
	"iu/+x4VwQnIHmdwkmt1zh4JpxXifheIqeo+fe8ZS90qX3ecg/7pgK8hhSWTyNK38vaV2lF9kFxk0d80/",
	"AQAA///nkiWQLhQAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
